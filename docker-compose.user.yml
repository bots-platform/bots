version: '3.8'

services:
  postgres:
    extends:
      file: ./docker-compose.yml
      service: postgres
    ports:
      - "15432:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    pod: "rpa_main_pod" 

  redis:
    extends:
      file: ./docker-compose.yml
      service: redis
    restart: unless-stopped
    pod: "rpa_main_pod"  

  backend:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: rpa_backend
    environment:
      - DATABASE_URL=postgresql://rpa_user:${POSTGRES_PASSWORD:-admin}@postgres:5432/rpa_bots
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - MAX_SESSIONS_PER_USER=${MAX_SESSIONS_PER_USER:-5}
    ports:
      - "8000:8000" 

    volumes:
      - ./media:/app/media:Z 
    user: "1001:1001" 
    command: ["gunicorn", "main:app", "--bind", "0.0.0.0:8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    pod: "rpa_main_pod"  

  celery_worker:
    extends:
      file: ./docker-compose.yml
      service: celery_worker
    user: "1001:1001" 
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    pod: "rpa_main_pod"  

  celery_beat:
    extends:
      file: ./docker-compose.yml
      service: celery_beat
    user: "1001:1001" 
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    pod: "rpa_main_pod" 

  frontend:
    build:
      context: ../React-Bots
      dockerfile: docker/frontend/Dockerfile
    container_name: rpa_frontend
    environment:
      - VITE_API_BASE_URL=http://backend:8000
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - rpa_network
    restart: unless-stopped
    pod: "rpa_main_pod"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3 

  # nginx:
  #   extends:
  #     file: ../React-Bots/docker-compose.yml
  #     service: nginx
  #   ports:
  #     - "8083:80"      # Puerto HTTP Ãºnico para tu proxy
  #     - "8443:443"     # Puerto HTTPS para proxy
  #   volumes:
  #     - ../React-Bots/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ../React-Bots/docker/nginx/conf.d:/etc/nginx/conf.d
  #     - ../React-Bots/docker/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #   networks:
  #     - rpa_network
  #     - frontend_network
  #   restart: unless-stopped
  #   pod: "rpa_main_pod"  # Agrupar en el mismo pod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rpa_network:
    driver: bridge
  frontend_network:
    driver: bridge 