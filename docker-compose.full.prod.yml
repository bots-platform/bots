version: '3.8'

services:
  # Backend Services (Production)
  postgres:
    image: postgres:15-alpine
    container_name: rpa_postgres_prod
    environment:
      POSTGRES_DB: rpa_bots
      POSTGRES_USER: rpa_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpa_user -d rpa_bots"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: rpa_redis_prod
    command: redis-server --appendonly yes
    volumes:
      - redis_prod_data:/data
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: rpa_backend_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://rpa_user:${POSTGRES_PASSWORD}@postgres:5432/rpa_bots
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: rpa_celery_worker_prod
    command: celery -A app.core.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://rpa_user:${POSTGRES_PASSWORD}@postgres:5432/rpa_bots
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: rpa_celery_beat_prod
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://rpa_user:${POSTGRES_PASSWORD}@postgres:5432/rpa_bots
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    restart: unless-stopped

  # Frontend Services (Production)
  frontend:
    build:
      context: ../React-Bots
      dockerfile: docker/frontend/Dockerfile
    container_name: rpa_frontend_prod
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - rpa_network
      - frontend_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: rpa_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../React-Bots/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../React-Bots/docker/nginx/conf.d:/etc/nginx/conf.d
      - ../React-Bots/docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - rpa_network
      - frontend_network
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  rpa_network:
    driver: bridge
  frontend_network:
    driver: bridge 